CREATE OR REPLACE FUNCTION UNUSUAL_EVENT_A_NOTIFY()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$
DECLARE
  status text;
BEGIN
	PERFORM ID FROM UNUSUAL_EVENT_C WHERE ID = NEW.ID;
	IF FOUND THEN UPDATE UNUSUAL_EVENT_C SET ID_UNUSUAL_EVENT_A=NEW.ID WHERE ID=NEW.ID;
	ELSE INSERT INTO UNUSUAL_EVENT_C VALUES (NEW.ID, NEW.ID, NULL, TO_CHAR(CURRENT_TIMESTAMP, 'DD/MM/YYYY HH:mm'));
  	END IF;
  RETURN NEW;
END;
$function$

CREATE OR REPLACE FUNCTION UNUSUAL_EVENT_B_NOTIFY()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$
DECLARE
  status text;
BEGIN
	PERFORM ID FROM UNUSUAL_EVENT_C WHERE ID = NEW.ID;
	IF FOUND THEN UPDATE UNUSUAL_EVENT_C SET ID_UNUSUAL_EVENT_B=NEW.ID WHERE ID=NEW.ID;
	ELSE INSERT INTO UNUSUAL_EVENT_C VALUES (NEW.ID, NULL, NEW.ID, TO_CHAR(CURRENT_TIMESTAMP, 'DD/MM/YYYY HH:mm'));
  	END IF;
  RETURN NEW;
END;
$function$

CREATE OR REPLACE FUNCTION public.user_ins(_id character varying, _name character varying, _email character varying, OUT o_status_msg character varying)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
declare
	 V_STATUS CHARACTER VARYING;
BEGIN
-- 	INSERT USER_C
		INSERT INTO USER_C values (_ID, _NAME, _EMAIL);
-- 	INSERT USER_A
		INSERT INTO USER_A values (_ID, _NAME, _EMAIL);
-- 	INSERT USER_B
		INSERT INTO USER_B values (_ID, _NAME, _EMAIL);
		
	IF FOUND THEN O_STATUS_MSG := 'SUKSES';
	ELSE O_STATUS_MSG := 'FAILED';
	END IF;
END;
$function$